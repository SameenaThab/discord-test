{"ast":null,"code":"import _defineProperty from\"/Users/sameenathabassum/Desktop/discord-test/fullstack-test/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _slicedToArray from\"/Users/sameenathabassum/Desktop/discord-test/fullstack-test/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import classnames from\"classnames\";import formatRelative from\"date-fns/formatRelative\";import React from\"react\";import{useChannelStore}from\"../stores/channels\";import{useMessageStore}from\"../stores/messages\";import{useUserStore}from\"../stores/users\";import MessageEditor from\"./MessageEditor\";import styles from\"./MessageViewer.module.css\";import ReactionCreator from\"../components/ReactionCreator\";var Message=function Message(_ref){var content=_ref.content,createdAt=_ref.createdAt,id=_ref.id,userId=_ref.userId,channelId=_ref.channelId;var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),isEditing=_React$useState2[0],setIsEditing=_React$useState2[1];var user=useUserStore(function(state){return state.users.find(function(user){return user.id===userId;});});var activeUserId=useUserStore(function(state){return state.activeUserId;});var dateInstance=React.useMemo(function(){return new Date(createdAt);},[createdAt]);return React.createElement(\"div\",{className:styles.message},React.createElement(\"div\",{className:styles.metadata},user==null?null:React.createElement(\"span\",{className:styles.username},user.username),React.createElement(\"span\",{className:styles.timestamp},formatRelative(dateInstance,new Date()))),isEditing?React.createElement(MessageEditor,{channelId:channelId,id:id,content:content,onClose:function onClose(){return setIsEditing(false);}}):content,userId===activeUserId&&!isEditing?React.createElement(\"button\",{onClick:function onClick(){return setIsEditing(true);},className:styles.editButton},\"Edit\"):null);};var MessageViewer=function MessageViewer(){var allMessages=useMessageStore(function(state){return state.messages;});var activeChannelId=useChannelStore(function(state){return state.activeChannelId;});var messagesForActiveChannel=React.useMemo(function(){return allMessages.filter(function(message){return message.channelId===activeChannelId;});},[activeChannelId,allMessages]);var isEmpty=messagesForActiveChannel.length===0;return React.createElement(\"div\",{className:classnames(styles.wrapper,_defineProperty({},styles.wrapperEmpty,isEmpty))},isEmpty?React.createElement(\"div\",{className:styles.empty},\"No messages\",\" \",React.createElement(\"span\",{\"aria-label\":\"Sad face\",role:\"img\"},\"\\uD83D\\uDE22\")):messagesForActiveChannel.map(function(message){return React.createElement(\"div\",{key:message.id,className:styles.empty},React.createElement(Message,{channelId:activeChannelId,key:message.id,id:message.id,content:message.content,createdAt:message.createdAt,userId:message.userId}),React.createElement(ReactionCreator,{messageId:message.id}));}));};export default MessageViewer;","map":{"version":3,"sources":["/Users/sameenathabassum/Desktop/discord-test/fullstack-test/src/components/MessageViewer.jsx"],"names":["classnames","formatRelative","React","useChannelStore","useMessageStore","useUserStore","MessageEditor","styles","ReactionCreator","Message","content","createdAt","id","userId","channelId","useState","isEditing","setIsEditing","user","state","users","find","activeUserId","dateInstance","useMemo","Date","message","metadata","username","timestamp","editButton","MessageViewer","allMessages","messages","activeChannelId","messagesForActiveChannel","filter","isEmpty","length","wrapper","wrapperEmpty","empty","map"],"mappings":"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","sourcesContent":["import classnames from \"classnames\";\nimport formatRelative from \"date-fns/formatRelative\";\nimport React from \"react\";\nimport { useChannelStore } from \"../stores/channels\";\nimport { useMessageStore } from \"../stores/messages\";\nimport { useUserStore } from \"../stores/users\";\nimport MessageEditor from \"./MessageEditor\";\nimport styles from \"./MessageViewer.module.css\";\nimport ReactionCreator from \"../components/ReactionCreator\";\n\nconst Message = ({ content, createdAt, id, userId, channelId }) => {\n  const [isEditing, setIsEditing] = React.useState(false);\n  const user = useUserStore((state) =>\n    state.users.find((user) => user.id === userId)\n  );\n  const activeUserId = useUserStore((state) => state.activeUserId);\n  const dateInstance = React.useMemo(() => new Date(createdAt), [createdAt]);\n\n  return (\n    <div className={styles.message}> \n      <div className={styles.metadata}>\n        {user == null ? null : (\n          <span className={styles.username}>{user.username}</span>\n        )}\n        <span className={styles.timestamp}>\n          {formatRelative(dateInstance, new Date())}\n        </span>\n      </div>\n      {isEditing ? (\n        <MessageEditor\n          channelId={channelId}\n          id={id}\n          content={content}\n          onClose={() => setIsEditing(false)}\n        />\n      ) : (\n        content\n      )}\n      {userId === activeUserId && !isEditing ? (\n        <button\n          onClick={() => setIsEditing(true)}\n          className={styles.editButton}\n        >\n          Edit\n        </button>\n      ) : null}\n    </div>\n  );\n};\n\nconst MessageViewer = () => {\n  const allMessages = useMessageStore((state) => state.messages);\n  const activeChannelId = useChannelStore((state) => state.activeChannelId);\n  const messagesForActiveChannel = React.useMemo(\n    () =>\n      allMessages.filter((message) => message.channelId === activeChannelId),\n    [activeChannelId, allMessages]\n  );\n  const isEmpty = messagesForActiveChannel.length === 0;\n\n  return (\n    <div\n      className={classnames(styles.wrapper, { [styles.wrapperEmpty]: isEmpty })}\n    >\n      {isEmpty ? (\n        <div className={styles.empty}>\n          No messages{\" \"}\n          <span aria-label=\"Sad face\" role=\"img\">\n            ðŸ˜¢\n          </span>\n        </div>\n      ) : (\n        messagesForActiveChannel.map((message) => (\n          <div key={message.id} className={styles.empty}>\n            <Message\n              channelId={activeChannelId}\n              key={message.id}\n              id={message.id}\n              content={message.content}\n              createdAt={message.createdAt}\n              userId={message.userId}\n            />\n            <ReactionCreator messageId={message.id}/>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default MessageViewer;\n"]},"metadata":{},"sourceType":"module"}