{"ast":null,"code":"import _slicedToArray from\"/Users/sameenathabassum/Desktop/discord-test/fullstack-test/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import create from\"zustand\";import socket from\"../lib/socket\";import{clientEvents,serverEvents}from\"../constants\";var _create=create(function(set,get){return{activeChannelId:null,channels:[],setActiveChannelId:function setActiveChannelId(activeChannelId){return set({activeChannelId:activeChannelId});}};}),_create2=_slicedToArray(_create,2),useChannelStore=_create2[0],channelStoreApi=_create2[1];export{useChannelStore,channelStoreApi};export var initializeChannelStore=function initializeChannelStore(){socket.on(serverEvents.UPDATE_ALL_CHANNELS,function(channels){var currentState=channelStoreApi.getState();channelStoreApi.setState({channels:channels,activeChannelId:currentState.activeChannelId==null&&channels.length>0?channels[0].id:currentState.activeChannelId});});socket.emit(clientEvents.FETCH_ALL_CHANNELS);};","map":{"version":3,"sources":["/Users/sameenathabassum/Desktop/discord-test/fullstack-test/src/stores/channels.js"],"names":["create","socket","clientEvents","serverEvents","set","get","activeChannelId","channels","setActiveChannelId","useChannelStore","channelStoreApi","initializeChannelStore","on","UPDATE_ALL_CHANNELS","currentState","getState","setState","length","id","emit","FETCH_ALL_CHANNELS"],"mappings":"8IAAA,MAAOA,CAAAA,MAAP,KAAmB,SAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,eAAnB,CACA,OAASC,YAAT,CAAuBC,YAAvB,KAA2C,cAA3C,C,YAEkDH,MAAM,CAAC,SAACI,GAAD,CAAMC,GAAN,QAAe,CACtEC,eAAe,CAAE,IADqD,CAEtEC,QAAQ,CAAE,EAF4D,CAGtEC,kBAAkB,CAAE,4BAACF,eAAD,QAAqBF,CAAAA,GAAG,CAAC,CAAEE,eAAe,CAAfA,eAAF,CAAD,CAAxB,EAHkD,CAAf,EAAD,C,oCAA1CG,e,aAAiBC,e,qDAM/B,MAAO,IAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,EAAM,CAC1CV,MAAM,CAACW,EAAP,CAAUT,YAAY,CAACU,mBAAvB,CAA4C,SAACN,QAAD,CAAc,CACxD,GAAMO,CAAAA,YAAY,CAAGJ,eAAe,CAACK,QAAhB,EAArB,CACAL,eAAe,CAACM,QAAhB,CAAyB,CACvBT,QAAQ,CAARA,QADuB,CAEvBD,eAAe,CACbQ,YAAY,CAACR,eAAb,EAAgC,IAAhC,EAAwCC,QAAQ,CAACU,MAAT,CAAkB,CAA1D,CACIV,QAAQ,CAAC,CAAD,CAAR,CAAYW,EADhB,CAEIJ,YAAY,CAACR,eALI,CAAzB,EAOD,CATD,EAUAL,MAAM,CAACkB,IAAP,CAAYjB,YAAY,CAACkB,kBAAzB,EACD,CAZM","sourcesContent":["import create from \"zustand\";\nimport socket from \"../lib/socket\";\nimport { clientEvents, serverEvents } from \"../constants\";\n\nexport const [useChannelStore, channelStoreApi] = create((set, get) => ({\n  activeChannelId: null,\n  channels: [],\n  setActiveChannelId: (activeChannelId) => set({ activeChannelId }),\n}));\n\nexport const initializeChannelStore = () => {\n  socket.on(serverEvents.UPDATE_ALL_CHANNELS, (channels) => {\n    const currentState = channelStoreApi.getState();\n    channelStoreApi.setState({\n      channels,\n      activeChannelId:\n        currentState.activeChannelId == null && channels.length > 0\n          ? channels[0].id\n          : currentState.activeChannelId,\n    });\n  });\n  socket.emit(clientEvents.FETCH_ALL_CHANNELS);\n};\n"]},"metadata":{},"sourceType":"module"}