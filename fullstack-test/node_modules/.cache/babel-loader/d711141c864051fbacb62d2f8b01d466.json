{"ast":null,"code":"var _jsxFileName = \"/Users/sameenathabassum/Desktop/discord-test/fullstack-test/src/components/ReactionIcon.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { createReaction, deleteReaction } from \"../actions\";\nimport styles from \"./ReactionIcon.module.css\";\nimport { useReactionStore } from \"../stores/reactions\";\nimport { useUserStore } from \"../stores/users\";\nimport classnames from \"classnames\";\n\nconst ReactionIcon = ({\n  messageId,\n  emoji\n}) => {\n  const activeUserId = useUserStore(state => state.activeUserId);\n  const allReactions = useReactionStore(state => state.reactions);\n  const reactionsForMessage = allReactions.filter(reaction => reaction.messageId === messageId && reaction.emoji === emoji);\n  const activeUsersReaction = allReactions.find(reaction => reaction.messageId === messageId && reaction.emoji === emoji && reaction.userId === activeUserId);\n\n  const toggleReaction = () => {\n    activeUsersReaction !== undefined ? deleteReaction(activeUsersReaction.id) : createReaction(messageId, emoji);\n  };\n\n  return React.createElement(\"button\", {\n    className: classnames(styles.emojiButton, {\n      [styles.statusIndicatorOnline]: activeUsersReaction !== undefined\n    }),\n    onClick: () => toggleReaction(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    \"aria-label\": \"emoji\",\n    role: \"img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, emoji, \" \", reactionsForMessage.length));\n};\n\nexport default ReactionIcon;","map":{"version":3,"sources":["/Users/sameenathabassum/Desktop/discord-test/fullstack-test/src/components/ReactionIcon.jsx"],"names":["React","useState","useEffect","createReaction","deleteReaction","styles","useReactionStore","useUserStore","classnames","ReactionIcon","messageId","emoji","activeUserId","state","allReactions","reactions","reactionsForMessage","filter","reaction","activeUsersReaction","find","userId","toggleReaction","undefined","id","emojiButton","statusIndicatorOnline","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,YAA/C;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,MAAOC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAyB;AAC7C,QAAMC,YAAY,GAAGL,YAAY,CAAEM,KAAD,IAAWA,KAAK,CAACD,YAAlB,CAAjC;AAEA,QAAME,YAAY,GAAGR,gBAAgB,CAAEO,KAAD,IAAWA,KAAK,CAACE,SAAlB,CAArC;AAEA,QAAMC,mBAAmB,GAAGF,YAAY,CAACG,MAAb,CAAqBC,QAAD,IAAcA,QAAQ,CAACR,SAAT,KAAuBA,SAAvB,IAAoCQ,QAAQ,CAACP,KAAT,KAAmBA,KAAzF,CAA5B;AAEA,QAAMQ,mBAAmB,GAAGL,YAAY,CAACM,IAAb,CAAmBF,QAAD,IAAcA,QAAQ,CAACR,SAAT,KAAuBA,SAAvB,IAAoCQ,QAAQ,CAACP,KAAT,KAAmBA,KAAvD,IAAgEO,QAAQ,CAACG,MAAT,KAAoBT,YAApH,CAA5B;;AAEA,QAAMU,cAAc,GAAG,MAAM;AAC3BH,IAAAA,mBAAmB,KAAKI,SAAxB,GAAmCnB,cAAc,CAACe,mBAAmB,CAACK,EAArB,CAAjD,GAA4ErB,cAAc,CAACO,SAAD,EAAWC,KAAX,CAA1F;AACD,GAFD;;AAIA,SACE;AAAQ,IAAA,SAAS,EAAEH,UAAU,CAACH,MAAM,CAACoB,WAAR,EAAqB;AAC1C,OAACpB,MAAM,CAACqB,qBAAR,GAAgCP,mBAAmB,KAAKI;AADd,KAArB,CAA7B;AAEU,IAAA,OAAO,EAAE,MAAMD,cAAc,EAFvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI;AAAM,kBAAW,OAAjB;AAAyB,IAAA,IAAI,EAAC,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKX,KADL,OACaK,mBAAmB,CAACW,MADjC,CAHJ,CADF;AASD,CAtBD;;AAwBA,eAAelB,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { createReaction, deleteReaction } from \"../actions\";\nimport styles from \"./ReactionIcon.module.css\";\nimport { useReactionStore } from \"../stores/reactions\";\nimport { useUserStore } from \"../stores/users\";\nimport classnames from \"classnames\";\n\nconst  ReactionIcon = ({ messageId,emoji }) => {\n  const activeUserId = useUserStore((state) => state.activeUserId);\n\n  const allReactions = useReactionStore((state) => state.reactions);\n\n  const reactionsForMessage = allReactions.filter((reaction) => reaction.messageId === messageId && reaction.emoji === emoji);\n\n  const activeUsersReaction = allReactions.find((reaction) => reaction.messageId === messageId && reaction.emoji === emoji && reaction.userId === activeUserId);\n\n  const toggleReaction = () => {\n    activeUsersReaction !== undefined? deleteReaction(activeUsersReaction.id) : createReaction(messageId,emoji);\n  };\n \n  return (\n    <button className={classnames(styles.emojiButton, {\n            [styles.statusIndicatorOnline]: activeUsersReaction !== undefined,\n          })} onClick={() => toggleReaction()}>\n        <span aria-label=\"emoji\" role=\"img\">\n            {emoji} {reactionsForMessage.length}\n        </span>\n    </button>\n  );\n};\n\nexport default ReactionIcon;"]},"metadata":{},"sourceType":"module"}