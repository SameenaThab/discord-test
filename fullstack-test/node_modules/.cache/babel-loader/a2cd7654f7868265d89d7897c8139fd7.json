{"ast":null,"code":"import { useReducer, useRef, useEffect, useLayoutEffect } from 'react';\nconst useIsoLayoutEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect;\n\nfunction create(createState) {\n  let state;\n  let subscribers = [];\n  let subscriberCount = 0;\n\n  const setState = partial => {\n    const partialState = typeof partial === 'function' ? partial(state) : partial;\n\n    if (partialState !== state) {\n      state = Object.assign({}, state, partialState); // Reset subscriberCount because we will be removing holes from the\n      // subscribers array and changing the length which should be the same as\n      // subscriberCount.\n\n      subscriberCount = 0; // Create a dense array by removing holes from the subscribers array.\n      // Holes are not iterated by Array.prototype.filter.\n\n      subscribers = subscribers.filter(subscriber => {\n        subscriber.index = subscriberCount++;\n        return true;\n      }); // Call all subscribers only after the subscribers array has been changed\n      // to a dense array. Subscriber callbacks cannot be called above in\n      // subscribers.filter because the callbacks can cause a synchronous\n      // increment of subscriberCount if not batched.\n\n      subscribers.forEach(subscriber => subscriber.callback());\n    }\n  };\n\n  const getState = () => state;\n\n  const getSubscriber = (listener, selector = getState, equalityFn = Object.is) => ({\n    callback: () => {},\n    currentSlice: selector(state),\n    equalityFn,\n    errored: false,\n    index: subscriberCount++,\n    listener,\n    selector\n  });\n\n  const subscribe = subscriber => {\n    subscriber.callback = () => {\n      // Selector or equality function could throw but we don't want to stop\n      // the listener from being called.\n      // https://github.com/react-spring/zustand/pull/37\n      try {\n        const newStateSlice = subscriber.selector(state);\n\n        if (!subscriber.equalityFn(subscriber.currentSlice, newStateSlice)) {\n          subscriber.listener(subscriber.currentSlice = newStateSlice);\n        }\n      } catch (error) {\n        subscriber.errored = true;\n        subscriber.listener(null, error);\n      }\n    }; // subscriber.index is set during the render phase in order to store the\n    // subscibers in a top-down order. The subscribers array will become a\n    // sparse array when an index is skipped (due to an interrupted render) or\n    // a component unmounts and the subscriber is deleted. It's converted back\n    // to a dense array in setState.\n\n\n    subscribers[subscriber.index] = subscriber; // Delete creates a hole and preserves the array length. If we used\n    // Array.prototype.splice, subscribers with a greater subscriber.index\n    // would no longer match their actual index in subscribers.\n\n    return () => delete subscribers[subscriber.index];\n  };\n\n  const apiSubscribe = (listener, selector, equalityFn) => subscribe(getSubscriber(listener, selector, equalityFn));\n\n  const destroy = () => subscribers = [];\n\n  const useStore = (selector = getState, equalityFn = Object.is) => {\n    const forceUpdate = useReducer(c => c + 1, 0)[1];\n    const subscriberRef = useRef();\n\n    if (!subscriberRef.current) {\n      subscriberRef.current = getSubscriber(forceUpdate, selector, equalityFn);\n    }\n\n    const subscriber = subscriberRef.current;\n    let newStateSlice;\n    let hasNewStateSlice = false; // The selector or equalityFn need to be called during the render phase if\n    // they change. We also want legitimate errors to be visible so we re-run\n    // them if they errored in the subscriber.\n\n    if (subscriber.selector !== selector || subscriber.equalityFn !== equalityFn || subscriber.errored) {\n      // Using local variables to avoid mutations in the render phase.\n      newStateSlice = selector(state);\n      hasNewStateSlice = !equalityFn(subscriber.currentSlice, newStateSlice);\n    } // Syncing changes in useEffect.\n\n\n    useIsoLayoutEffect(() => {\n      if (hasNewStateSlice) {\n        subscriber.currentSlice = newStateSlice;\n      }\n\n      subscriber.selector = selector;\n      subscriber.equalityFn = equalityFn;\n      subscriber.errored = false;\n    });\n    useIsoLayoutEffect(() => subscribe(subscriber), []);\n    return hasNewStateSlice ? newStateSlice : subscriber.currentSlice;\n  };\n\n  const api = {\n    setState,\n    getState,\n    subscribe: apiSubscribe,\n    destroy\n  };\n  state = createState(setState, getState, api);\n  return [useStore, api];\n}\n\nexport default create;\nexport { create };","map":null,"metadata":{},"sourceType":"module"}