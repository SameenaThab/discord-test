{"ast":null,"code":"import _slicedToArray from \"/Users/sameenathabassum/Desktop/discord-test/fullstack-test/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sameenathabassum/Desktop/discord-test/fullstack-test/src/components/MessageViewer.jsx\";\nimport classnames from \"classnames\";\nimport formatRelative from \"date-fns/formatRelative\";\nimport React from \"react\";\nimport { useChannelStore } from \"../stores/channels\";\nimport { useMessageStore } from \"../stores/messages\";\nimport { useUserStore } from \"../stores/users\";\nimport MessageEditor from \"./MessageEditor\";\nimport styles from \"./MessageViewer.module.css\";\nimport Button from \"./Button\";\n\nconst Message = ({\n  content,\n  createdAt,\n  id,\n  userId,\n  channelId\n}) => {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        isEditing = _React$useState2[0],\n        setIsEditing = _React$useState2[1];\n\n  const user = useUserStore(state => state.users.find(user => user.id === userId));\n  const activeUserId = useUserStore(state => state.activeUserId);\n  const dateInstance = React.useMemo(() => new Date(createdAt), [createdAt]);\n  return React.createElement(\"div\", {\n    className: styles.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.metadata,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, user == null ? null : React.createElement(\"span\", {\n    className: styles.username,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, user.username), React.createElement(\"span\", {\n    className: styles.timestamp,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, formatRelative(dateInstance, new Date()))), isEditing ? React.createElement(MessageEditor, {\n    channelId: channelId,\n    id: id,\n    content: content,\n    onClose: () => setIsEditing(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }) : content, userId === activeUserId && !isEditing ? React.createElement(\"button\", {\n    onClick: () => setIsEditing(true),\n    className: styles.editButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Edit\") : null);\n};\n\nconst MessageViewer = () => {\n  const allMessages = useMessageStore(state => state.messages);\n  const activeChannelId = useChannelStore(state => state.activeChannelId);\n  const messagesForActiveChannel = React.useMemo(() => allMessages.filter(message => message.channelId === activeChannelId), [activeChannelId, allMessages]);\n  const isEmpty = messagesForActiveChannel.length === 0;\n  return React.createElement(\"div\", {\n    className: classnames(styles.wrapper, {\n      [styles.wrapperEmpty]: isEmpty\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, isEmpty ? React.createElement(\"div\", {\n    className: styles.empty,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"No messages\", \" \", React.createElement(\"span\", {\n    \"aria-label\": \"Sad face\",\n    role: \"img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"\\uD83D\\uDE22\")) : messagesForActiveChannel.map(message => React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(Message, {\n    channelId: activeChannelId,\n    key: message.id,\n    id: message.id,\n    content: message.content,\n    createdAt: message.createdAt,\n    userId: message.userId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: styles.emojiButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"\\uD83D\\uDC4D\"), React.createElement(\"button\", {\n    className: styles.emojiButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"\\u2764\\uFE0F\"), React.createElement(\"button\", {\n    className: styles.emojiButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"\\uD83D\\uDE02\")))));\n};\n\nexport default MessageViewer;","map":{"version":3,"sources":["/Users/sameenathabassum/Desktop/discord-test/fullstack-test/src/components/MessageViewer.jsx"],"names":["classnames","formatRelative","React","useChannelStore","useMessageStore","useUserStore","MessageEditor","styles","Button","Message","content","createdAt","id","userId","channelId","useState","isEditing","setIsEditing","user","state","users","find","activeUserId","dateInstance","useMemo","Date","message","metadata","username","timestamp","editButton","MessageViewer","allMessages","messages","activeChannelId","messagesForActiveChannel","filter","isEmpty","length","wrapper","wrapperEmpty","empty","map","emojiButton"],"mappings":"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","sourcesContent":["import classnames from \"classnames\";\nimport formatRelative from \"date-fns/formatRelative\";\nimport React from \"react\";\nimport { useChannelStore } from \"../stores/channels\";\nimport { useMessageStore } from \"../stores/messages\";\nimport { useUserStore } from \"../stores/users\";\nimport MessageEditor from \"./MessageEditor\";\nimport styles from \"./MessageViewer.module.css\";\nimport Button from \"./Button\";\n\nconst Message = ({ content, createdAt, id, userId, channelId }) => {\n  const [isEditing, setIsEditing] = React.useState(false);\n  const user = useUserStore((state) =>\n    state.users.find((user) => user.id === userId)\n  );\n  const activeUserId = useUserStore((state) => state.activeUserId);\n  const dateInstance = React.useMemo(() => new Date(createdAt), [createdAt]);\n\n  return (\n    <div className={styles.message}>\n      <div className={styles.metadata}>\n        {user == null ? null : (\n          <span className={styles.username}>{user.username}</span>\n        )}\n        <span className={styles.timestamp}>\n          {formatRelative(dateInstance, new Date())}\n        </span>\n      </div>\n      {isEditing ? (\n        <MessageEditor\n          channelId={channelId}\n          id={id}\n          content={content}\n          onClose={() => setIsEditing(false)}\n        />\n      ) : (\n        content\n      )}\n      {userId === activeUserId && !isEditing ? (\n        <button\n          onClick={() => setIsEditing(true)}\n          className={styles.editButton}\n        >\n          Edit\n        </button>\n      ) : null}\n    </div>\n  );\n};\n\nconst MessageViewer = () => {\n  const allMessages = useMessageStore((state) => state.messages);\n  const activeChannelId = useChannelStore((state) => state.activeChannelId);\n  const messagesForActiveChannel = React.useMemo(\n    () =>\n      allMessages.filter((message) => message.channelId === activeChannelId),\n    [activeChannelId, allMessages]\n  );\n  const isEmpty = messagesForActiveChannel.length === 0;\n\n  return (\n    <div\n      className={classnames(styles.wrapper, { [styles.wrapperEmpty]: isEmpty })}\n    >\n      {isEmpty ? (\n        <div className={styles.empty}>\n          No messages{\" \"}\n          <span aria-label=\"Sad face\" role=\"img\">\n            😢\n          </span>\n        </div>\n      ) : (\n        messagesForActiveChannel.map((message) => (\n          <div>\n            <Message\n              channelId={activeChannelId}\n              key={message.id}\n              id={message.id}\n              content={message.content}\n              createdAt={message.createdAt}\n              userId={message.userId}\n            />\n            <div>\n              <button className={styles.emojiButton}>\n                👍\n              </button>\n              <button className={styles.emojiButton}>\n                ❤️\n              </button>\n              <button className={styles.emojiButton}>\n                😂\n              </button>\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default MessageViewer;\n"]},"metadata":{},"sourceType":"module"}